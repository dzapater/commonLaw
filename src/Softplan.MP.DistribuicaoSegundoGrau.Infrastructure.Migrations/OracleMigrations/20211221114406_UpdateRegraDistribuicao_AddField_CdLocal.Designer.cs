// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Softplan.MP.DistribuicaoSegundoGrau.Infrastructure.Migrations;

namespace Softplan.MP.DistribuicaoSegundoGrau.Infrastructure.Migrations.OracleMigrations
{
    [DbContext(typeof(OracleMigrationsDbContext))]
    [Migration("20211221114406_UpdateRegraDistribuicao_AddField_CdLocal")]
    partial class UpdateRegraDistribuicao_AddField_CdLocal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SAJ_DSG")
                .HasAnnotation("ProductVersion", "3.1.17");

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnName("AREA")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnName("ATIVO")
                        .HasColumnType("bool");

                    b.Property<int>("CdLocal")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("nvarchar2(120)")
                        .HasMaxLength(120);

                    b.Property<int>("EscopoEquilibrio")
                        .HasColumnName("ESCOPO_EQUILIBRIO")
                        .HasColumnType("int");

                    b.Property<int>("TipoProcesso")
                        .HasColumnName("TIPO_PROCESSO")
                        .HasColumnType("int");

                    b.Property<int>("VariavelEquilibrio")
                        .HasColumnName("VARIAVEL_EQUILIBRIO")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("REGRA_DISTRIBUICAO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoAssunto", b =>
                {
                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("REGRA_DISTRIBUICAO_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdAssunto")
                        .HasColumnName("ASSUNTO_ID")
                        .HasColumnType("int64");

                    b.HasKey("IdRegraDistribuicao", "IdAssunto");

                    b.ToTable("REGRA_DISTRIBUICAO_ASSUNTO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoClasse", b =>
                {
                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("REGRA_DISTRIBUICAO_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdClasse")
                        .HasColumnName("CLASSE_ID")
                        .HasColumnType("int64");

                    b.HasKey("IdRegraDistribuicao", "IdClasse");

                    b.ToTable("REGRA_DISTRIBUICAO_CLASSE");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoEspecialidade", b =>
                {
                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("REGRA_DISTRIBUICAO_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdEspecialidade")
                        .HasColumnName("ESPECIALIDADE_ID")
                        .HasColumnType("int64");

                    b.HasKey("IdRegraDistribuicao", "IdEspecialidade");

                    b.ToTable("REGRA_DISTRIBUICAO_ESPEC");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoOrgaoJulgador", b =>
                {
                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("REGRA_DISTRIBUICAO_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdOrgaoJulgador")
                        .HasColumnName("ORGAO_JULGADOR_ID")
                        .HasColumnType("int64");

                    b.Property<int>("IdOrigem")
                        .HasColumnName("ORIGEM_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdUnidade")
                        .HasColumnName("UNIDADE_ID")
                        .HasColumnType("int64");

                    b.HasKey("IdRegraDistribuicao", "IdOrgaoJulgador");

                    b.ToTable("REGRA_DISTRIBUICAO_ORGAO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoTarja", b =>
                {
                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("REGRA_DISTRIBUICAO_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdTarja")
                        .HasColumnName("TARJA_ID")
                        .HasColumnType("int64");

                    b.HasKey("IdRegraDistribuicao", "IdTarja");

                    b.ToTable("REGRA_DISTRIBUICAO_TARJA");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoUnidade", b =>
                {
                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("REGRA_DISTRIBUICAO_ID")
                        .HasColumnType("int");

                    b.Property<long>("IdUnidade")
                        .HasColumnName("UNIDADE_ID")
                        .HasColumnType("int64");

                    b.Property<int>("IdOrigem")
                        .HasColumnName("ORIGEM_ID")
                        .HasColumnType("int");

                    b.HasKey("IdRegraDistribuicao", "IdUnidade");

                    b.ToTable("REGRA_DISTRIBUICAO_UNIDADE");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.CompensacaoLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOG_ID")
                        .HasColumnType("int");

                    b.Property<int>("IdVaga")
                        .HasColumnName("VAGA_ID")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .HasColumnName("MOTIVO")
                        .HasColumnType("nvarchar2(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdVaga");

                    b.ToTable("COMPENSACAO_LOG");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnName("AREA")
                        .HasColumnType("int");

                    b.Property<int>("CdLocal")
                        .HasColumnName("CDLOCAL")
                        .HasColumnType("int");

                    b.Property<int>("Compensacao")
                        .HasColumnName("COMPENSACAO")
                        .HasColumnType("int");

                    b.Property<int>("CompensacaoPorVolume")
                        .HasColumnName("COMPENSACAO_POR_VOLUME")
                        .HasColumnType("int");

                    b.Property<bool>("ConsiderarConfiguracoesPrevencao")
                        .HasColumnName("CONFIGURACOES_PREVENCAO")
                        .HasColumnType("bool");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("nvarchar2(120)")
                        .HasMaxLength(120);

                    b.Property<int>("DistribuicaoPorVolume")
                        .HasColumnName("DISTRIBUICAO_POR_VOLUME")
                        .HasColumnType("int");

                    b.Property<int>("Distribuicoes")
                        .HasColumnName("DISTRIBUICOES")
                        .HasColumnType("int");

                    b.Property<bool>("EstaAtiva")
                        .HasColumnName("ATIVA")
                        .HasColumnType("bool");

                    b.Property<int>("IdInstalacao")
                        .HasColumnName("INSTALACAO_ID")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .HasColumnName("MOTIVO")
                        .HasColumnType("nvarchar2(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool>("PermiteDistribuicaoMesmaVaga")
                        .HasColumnName("DISTRIBUICAO_MESMA_VAGA")
                        .HasColumnType("bool");

                    b.Property<bool>("PermiteReuPreso")
                        .HasColumnName("REU_PRESO")
                        .HasColumnType("bool");

                    b.HasKey("Id");

                    b.ToTable("VAGA");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.VinculoMembroVagas.VinculoMembroVaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("IdVaga")
                        .HasColumnName("ID_VAGA")
                        .HasColumnType("int");

                    b.Property<string>("IdMembro")
                        .HasColumnName("ID_MEMBRO")
                        .HasColumnType("nvarchar2(120)")
                        .HasMaxLength(120);

                    b.Property<DateTimeOffset?>("DataFinal")
                        .HasColumnName("DATA_FINAL")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DataInicial")
                        .HasColumnName("DATA_INICIAL")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdMotivoMembroVaga")
                        .HasColumnName("ID_MOTIVO_MEMBRO_VAGA")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasColumnName("OBSERVACAO")
                        .HasColumnType("nvarchar2(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id", "IdVaga", "IdMembro");

                    b.HasIndex("IdVaga");

                    b.ToTable("MEMBRO_VAGA");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.VinculoVagasRegrasDistribuicao.VinculoVagaRegraDistribuicao", b =>
                {
                    b.Property<int>("IdVaga")
                        .HasColumnName("ID_VAGA")
                        .HasColumnType("int");

                    b.Property<int>("IdRegraDistribuicao")
                        .HasColumnName("ID_REGRADISTRIBUICAO")
                        .HasColumnType("int");

                    b.Property<int>("CompensacaoPorProcesso")
                        .HasColumnName("COMPENSACAO_POR_PROCESSO")
                        .HasColumnType("int");

                    b.Property<int>("CompensacaoPorVolume")
                        .HasColumnName("COMPENSACAO_POR_VOLUME")
                        .HasColumnType("int");

                    b.Property<int>("DistribuicaoPorProcesso")
                        .HasColumnName("DISTRIBUICAO_POR_PROCESSO")
                        .HasColumnType("int");

                    b.Property<int>("DistribuicaoPorVolume")
                        .HasColumnName("DISTRIBUICAO_POR_VOLUME")
                        .HasColumnType("int");

                    b.HasKey("IdVaga", "IdRegraDistribuicao");

                    b.HasIndex("IdRegraDistribuicao");

                    b.ToTable("VAGA_REGRA_DISTRIBUICAO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.AnaliseProcessos.AnaliseProcesso", b =>
                {
                    b.Property<string>("IdProcesso")
                        .HasColumnName("PROCESSO_ID")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("IdVaga")
                        .HasColumnName("VAGA_ID")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .HasColumnName("MOTIVO")
                        .HasColumnType("nvarchar2(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("TipoDistribuicao")
                        .HasColumnName("TIPO_DISTRIBUICAO")
                        .HasColumnType("int");

                    b.HasKey("IdProcesso");

                    b.ToTable("ANALISE_PROCESSO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.DistribuicaoProcessos.DistribuicaoProcesso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DISTRIBUICAO_ID")
                        .HasColumnType("int64");

                    b.Property<string>("IdProcesso")
                        .HasColumnName("PROCESSO_ID")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("IdVaga")
                        .HasColumnName("VAGA_ID")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .HasColumnName("MOTIVO")
                        .HasColumnType("nvarchar2(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("TipoDistribuicao")
                        .HasColumnName("TIPODISTRIBUICAO")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DISTRIBUICAO_PROCESSO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.DistribuicaoProcessos.DistribuicaoProcessoLog", b =>
                {
                    b.Property<long>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOG_ID")
                        .HasColumnType("int64");

                    b.Property<long>("DistribuicaoId")
                        .HasColumnName("DISTRIBUICAO_ID")
                        .HasColumnType("int64");

                    b.Property<string>("IdProcesso")
                        .IsRequired()
                        .HasColumnName("PROCESSO_ID")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Payload")
                        .HasColumnName("PAYLOAD")
                        .HasColumnType("blob");

                    b.Property<int>("PayloadSerialization")
                        .HasColumnName("PAYLOAD_SERIALIZATION_TYPE")
                        .HasColumnType("int");

                    b.Property<string>("PayloadType")
                        .HasColumnName("PAYLOAD_TYPE")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("TransactionId")
                        .HasColumnName("TRANSACTION_ID")
                        .HasColumnType("guid");

                    b.HasKey("IdLog");

                    b.HasIndex("DistribuicaoId");

                    b.HasIndex("IdProcesso")
                        .HasName("distribuicao_processo_log_processo");

                    b.HasIndex("IdProcesso", "TransactionId")
                        .HasName("distribuicao_processo_log_processo_transactionid");

                    b.ToTable("DISTRIBUICAO_PROCESSO_LOG");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.ExcecaoVagas.ExcecaoVaga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int64");

                    b.Property<int?>("IdAssunto")
                        .HasColumnName("ASSUNTO_ID")
                        .HasColumnType("int");

                    b.Property<int?>("IdClasse")
                        .HasColumnName("CLASSE_ID")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialidade")
                        .HasColumnName("ESPECIALIDADE_ID")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrgaoJulgador")
                        .HasColumnName("ORGAO_JULGADOR_ID")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("ORIGEM_ID")
                        .HasColumnType("int");

                    b.Property<int?>("IdUnidade")
                        .HasColumnName("UNIDADE_ID")
                        .HasColumnType("int");

                    b.Property<int>("IdVaga")
                        .HasColumnName("VAGA_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EXCECAO_VAGA");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.ImpedimentoProcessos.ImpedimentoProcesso", b =>
                {
                    b.Property<string>("IdProcesso")
                        .HasColumnName("PROCESSO_ID")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<int>("IdImpedimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IMPEDIMENTO_ID")
                        .HasColumnType("int");

                    b.Property<int>("IdVaga")
                        .HasColumnName("VAGA_ID")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .HasColumnName("MOTIVO")
                        .HasColumnType("nvarchar2(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("IdProcesso", "IdImpedimento");

                    b.HasIndex("IdVaga");

                    b.ToTable("IMPEDIMENTO_PROCESSO");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Jobs.Distribuicoes.DistribuicaoVagaJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar2(450)");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PayLoad")
                        .HasColumnName("PAYLOAD")
                        .HasColumnType("nvarchar2(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("ROW_VERSION")
                        .HasColumnType("blob");

                    b.HasKey("Id");

                    b.ToTable("JOBS");

                    b.HasDiscriminator<string>("Id").HasValue("DistribuicaoVagaJob");
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", b =>
                {
                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("RegraDistribuicaoId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("RegraDistribuicaoId");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("REGRA_DISTRIBUICAO");

                            b1.WithOwner()
                                .HasForeignKey("RegraDistribuicaoId");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoAssunto", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", null)
                        .WithMany("Assuntos")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoClasse", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", null)
                        .WithMany("Classes")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoEspecialidade", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", null)
                        .WithMany("Especialidades")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoOrgaoJulgador", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", null)
                        .WithMany("OrgaosJulgadores")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoTarja", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", null)
                        .WithMany("Tarjas")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicaoUnidade", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", null)
                        .WithMany("Unidades")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.CompensacaoLog", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("IdVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("CompensacaoLogId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("CompensacaoLogId");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("COMPENSACAO_LOG");

                            b1.WithOwner()
                                .HasForeignKey("CompensacaoLogId");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Vaga", b =>
                {
                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("VagaId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("VagaId");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("VAGA");

                            b1.WithOwner()
                                .HasForeignKey("VagaId");
                        });

                    b.OwnsOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Orgao", "Orgao", b1 =>
                        {
                            b1.Property<int>("VagaId")
                                .HasColumnName("ID")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnName("ORGAO_ID")
                                .HasColumnType("int");

                            b1.Property<int>("IdTipoOrgao")
                                .HasColumnName("TIPO_ORGAO_ID")
                                .HasColumnType("int");

                            b1.Property<byte[]>("METADATA_ROW_VERSION")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.HasKey("VagaId");

                            b1.ToTable("VAGA");

                            b1.WithOwner()
                                .HasForeignKey("VagaId");
                        });

                    b.OwnsOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.ProcuradorTitular", "ProcuradorTitular", b1 =>
                        {
                            b1.Property<int>("VagaId")
                                .HasColumnName("ID")
                                .HasColumnType("int");

                            b1.Property<string>("Id")
                                .HasColumnName("PROCURADOR_TITULAR_ID")
                                .HasColumnType("nvarchar2(120)")
                                .HasMaxLength(120);

                            b1.Property<byte[]>("METADATA_ROW_VERSION")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.HasKey("VagaId");

                            b1.ToTable("VAGA");

                            b1.WithOwner()
                                .HasForeignKey("VagaId");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.VinculoMembroVagas.VinculoMembroVaga", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("IdVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("VinculoMembroVagaId")
                                .HasColumnType("int");

                            b1.Property<int>("VinculoMembroVagaIdVaga")
                                .HasColumnType("int");

                            b1.Property<string>("VinculoMembroVagaIdMembro")
                                .HasColumnType("nvarchar2(120)");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("VinculoMembroVagaId", "VinculoMembroVagaIdVaga", "VinculoMembroVagaIdMembro");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("MEMBRO_VAGA");

                            b1.WithOwner()
                                .HasForeignKey("VinculoMembroVagaId", "VinculoMembroVagaIdVaga", "VinculoMembroVagaIdMembro");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.VinculoVagasRegrasDistribuicao.VinculoVagaRegraDistribuicao", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.RegrasDistribuicao.RegraDistribuicao", "RegraDistribuicao")
                        .WithMany("VinculoVagas")
                        .HasForeignKey("IdRegraDistribuicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("IdVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("VinculoVagaRegraDistribuicaoIdVaga")
                                .HasColumnType("int");

                            b1.Property<int>("VinculoVagaRegraDistribuicaoIdRegraDistribuicao")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("VinculoVagaRegraDistribuicaoIdVaga", "VinculoVagaRegraDistribuicaoIdRegraDistribuicao");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("VAGA_REGRA_DISTRIBUICAO");

                            b1.WithOwner()
                                .HasForeignKey("VinculoVagaRegraDistribuicaoIdVaga", "VinculoVagaRegraDistribuicaoIdRegraDistribuicao");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.AnaliseProcessos.AnaliseProcesso", b =>
                {
                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<string>("AnaliseProcessoIdProcesso")
                                .HasColumnType("nvarchar2(200)");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("AnaliseProcessoIdProcesso");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("ANALISE_PROCESSO");

                            b1.WithOwner()
                                .HasForeignKey("AnaliseProcessoIdProcesso");
                        });

                    b.OwnsOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.AnaliseProcessos.AreaAtuacao", "AreaAtuacao", b1 =>
                        {
                            b1.Property<string>("AnaliseProcessoIdProcesso")
                                .HasColumnType("nvarchar2(200)");

                            b1.Property<long>("Id")
                                .HasColumnName("AREA_ATUACAO_ID")
                                .HasColumnType("int64")
                                .HasMaxLength(200);

                            b1.Property<byte[]>("METADATA_ROW_VERSION")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.HasKey("AnaliseProcessoIdProcesso");

                            b1.ToTable("ANALISE_PROCESSO");

                            b1.WithOwner()
                                .HasForeignKey("AnaliseProcessoIdProcesso");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.DistribuicaoProcessos.DistribuicaoProcesso", b =>
                {
                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<long>("DistribuicaoProcessoId")
                                .HasColumnType("int64");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("DistribuicaoProcessoId");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("DISTRIBUICAO_PROCESSO");

                            b1.WithOwner()
                                .HasForeignKey("DistribuicaoProcessoId");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.DistribuicaoProcessos.DistribuicaoProcessoLog", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.DistribuicaoProcessos.DistribuicaoProcesso", null)
                        .WithMany("Logs")
                        .HasForeignKey("DistribuicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.ExcecaoVagas.ExcecaoVaga", b =>
                {
                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<long>("ExcecaoVagaId")
                                .HasColumnType("int64");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("ExcecaoVagaId");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("EXCECAO_VAGA");

                            b1.WithOwner()
                                .HasForeignKey("ExcecaoVagaId");
                        });
                });

            modelBuilder.Entity("Softplan.MP.DistribuicaoSegundoGrau.Domain.Distribuicoes.ImpedimentoProcessos.ImpedimentoProcesso", b =>
                {
                    b.HasOne("Softplan.MP.DistribuicaoSegundoGrau.Domain.Cadastros.Vagas.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("IdVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Softplan.Common.Core.Entities.EntityMetadata", "Metadata", b1 =>
                        {
                            b1.Property<string>("ImpedimentoProcessoIdProcesso")
                                .HasColumnType("nvarchar2(200)");

                            b1.Property<int>("ImpedimentoProcessoIdImpedimento")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("DataAtualizacao")
                                .HasColumnName("METADATA_DATA_ATUALIZACAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("DataInclusao")
                                .HasColumnName("METADATA_DATA_INCLUSAO")
                                .HasColumnType("datetimeoffset");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("METADATA_ROW_VERSION")
                                .HasColumnType("blob");

                            b1.Property<string>("UsuarioAtualizacao")
                                .HasColumnName("METADATA_USUARIO_ATUALIZACAO")
                                .HasColumnType("nclob");

                            b1.Property<string>("UsuarioInclusao")
                                .HasColumnName("METADATA_USUARIO_INCLUSAO")
                                .HasColumnType("nclob");

                            b1.Property<Guid>("Uuid")
                                .HasColumnName("METADATA_UUID")
                                .HasColumnType("guid");

                            b1.HasKey("ImpedimentoProcessoIdProcesso", "ImpedimentoProcessoIdImpedimento");

                            b1.HasIndex("Uuid")
                                .IsUnique();

                            b1.ToTable("IMPEDIMENTO_PROCESSO");

                            b1.WithOwner()
                                .HasForeignKey("ImpedimentoProcessoIdProcesso", "ImpedimentoProcessoIdImpedimento");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
